#"Learning JavaScript"
# Chapter 3 discusses Literals, Variables, Constants, and Data Types

### The importance of vocabulary is often overlooked when you're learning how to program. This chapter is about data, and how we translate data into a format that JavaScript can understand. Before we dive into the data types available in JavaScript, we will discuss 'variables', 'constants', and 'literals', which are the mechanisms available to us in JavaScript for 'holding' data.
	Most of these terms are not specific to JavaScript, but are commonly understood in computer science.  Having a good grasp of the      concepts is important, of course, but paying attention to vocabulary makes it easy for you to transfer your knowledge to other languages, and learn from more sources. 

### Variable and Constants
- A variable is essentially a named value. The name implies that the value can change at any time.  
	--example: let currentTempC = 22; // degrees Celsius
- The 'let' keyword does 2 things:
	1. it declares (creates) the variable currentTempC 
	2. assigns it an initial value
		Note- we don't use 'let' again; 'let' specifically declares a variable, and you can only do it once.

- With numbers, there's no way to associate units with the value. Choosing to add "C" to the variable name to make it clear that the units are degrees Celsius.  The language can't enfore this, but it's a form of documentation that prevents casual mistakes.

- When you declare a variable, you don't have to provide it with an initial value. It implicitly gets a special value, 'undefined':
	let targetTempC; //equivalent to "let targetTempC = undefined";

- Declaring multiple variable with the same 'let' statement:
	let targetTempC, room1 = "conference_room_a", room2 = "lobby";

- In this example, we've declared three variables: targetTempC isn't initialized with a variable, so it implicitly has the value undefined; 	room1 is declared with an initial value of "conference_room_a"; and room2 is declared with an initial value of "lobby".  room1 and room2 are examples of string(text) variables.

- A 'constant' (new in ES6) also holds a value, but unlike a variable, can't be changed after initialization.  Let's use a 'constant' to  
express a comfortable room temperature and a maximum temp (const can also declare multiple constants):
	const ROOM_TEMP_C = 21.5, MAX_TEMP_C = 30;

-Conventional but not required, 'constants' refer to a specific number or string to be named with all uppercase letters and underscores to
 spot code, and provide visual cue that you shouldn't try to change their value.  (see example above)

## Variables or Constants: The advantage of using constants is that it makes it harder to accidentally change the value of something that 
shouldn't be changed. Rule of thumb: to using a 'constant'- if you find you have a legitimate need to change the value of the constant, you 
can always change it to a variable.

- Variables: 'One situation that is preferable of 'variables' instead of 'constants': variables are used in loop control.  Also variables are used when the value of something is naturally changing over time (such as targetTempC or currentTemp in Ch3).


### Identifiers Names 
	- Variable and Constant names (as well as function names) are called 'identifiers'.
		-Identifiers must start with a letter, dollar sign ($), or underscore(_).

		-Identifiers consist of letters, numbers, the dollar sign ($), and underscore(_).

		-Unicode characters are allowed (for example).

		-Identifiers cannot be a reserved word.

	- Reserved words are words that JavaScript might confuse with part of the language. For example, you can't have a variable
		called 'let'.
	
	-There's no single convention for JavaScript identifiers, but the two most common are:
		-Camel case:
			-currentTempC, anIdentifierName (so named because the capital letters look like the humps in a camel's back).

		-Snake case:
			-current_temp_c, an_identifier_name(slightly less popular).
	-It is recommended that whichever convention you use or prefer, consistency is ideal and good practice. Select one and stick with it. If you
	are working on a team or making your project available to a community, try choosing whatever the preferred convention is.
	It is also advisable to adhere to the following conventions:
		- Identifiers shouldn't start with a capital letter except for classes.
	
		- Very often, identifiers that start with one or two underscores are used to represent special or "internal" variables.  Unless you
		need to create your own special category of variables, avoid starting variable names with an underscore.


### Literals

	-Some 'literals' = currentTempC = 22.5;
	
	-The word 'lieral' means that you're providing the value directly in the program.  Essentially, a 'literal' is a way to 'create a value'; 
	JavaScript takes the literal value you provide and creates a data value from it.
	
	-It's important to understand the difference between a 'literal' and an 'identifier'.  For example, when we created a variable called room1,
	which had the value "conference_room_a".  room1 is an 'identifier'(referring to a constant), and "conference_room_a" is a 'string literal'
	(and also the value of room1).  

	-JavaScript is able to distinguish the identifier from the literal by the use of quotation marks (numbers don't need any sort of quotation 
	because identifiers can't start with a number).
		ex: let room1 = "conference_room_a";	// "conference_room_a" (in quotes) is
							// a literal

		    let currentRoom = room1;		// currentRoom now has the same value
							// as room1 ("conference_room_a")

		    let currentRoom = conference_room_a; // produces an error; no identifier
							 // called conference_room_a exists
 
			

	-You can use a literal anywhere you can use an identifier (where a value is expected). For example, in our program, we could just use the
	numeric literal 21.5 everywhere instead of using ROOM_TEMP_C. If you use the numeric literal in a couple places, this may be OK.
	But if you use it in 10 or 100 places, you should be using a constant or variable instead: it makes your code easier to read, and you can 
	change the value in one place instead of many.


### Primitive Types and Objects

	-In JavaScript, values are either 'primitives' or 'objects'. Primitive types (such as string and number) are 'immutable'.

		-There are Six Primitive types:
			
			-Number
			
			-String
		
			-Boolean
	
			-Null
	
			-Undefined
	
			-Symbol

	-Note that immutability doesn't mean the 'contents of a variable' can't change:
		
		let str = "hello";
		str = "world";

			-Pay attention to the keywords 'let' and 'str' in the second object/value variable. Only 'str' on the 2nd line can change
				content. Not the 'let'.


	-Note in addition to these 6 Primitive types, there are 'Objects'.  Unlike primitives, objects can take on different forms and values, and are more chameleon-like.  Because of their flexibility, 'objects' can be used to construct custom data types that JavaScript provides already built-in.
			- Array

			-Date
	
			-RegExp
	
			-Map and WeakMap

			-Set and WeakSet

	Primitive types have corresponding Object types:

		- number  |  Number
		- string  |  String    {All 3 Object types do not store value but rather handle functionality corresponding to primitive.}
 		- boolean |  boolean


### Numbers

	-JavaScript is an unusual programming language in that it only has this one numeric data type. On one hand, this favors beginners however, on the other hand, it reduces JavaScript's suitability for certain applications that require the performance of integer arithmetic, or the precision of
fixed-precision numbers.

	-JavaScript recognizes four types of numeric literal:  decimal, binary, octal, and hexa-decimal.
		
		-let count = 10;		//integer literal; count is still a double
		-const blue = 0x0000ff;		//hexadecimal (hex ff = decimal 255)
		-const umask = 0o0022;		//octal (octal 22 = decimal 18)
		-const roomTemp = 21.5;		//decimal
		-const c = 3.0e6;		//exponential (3.0 x 10^6 = 3,000,000)
		-const e = -1.6e-19;		//exponential (-1.6 x 10^-19 = 0.00000000000000000016)
		-const inf = Infinity;
		-const ninf = -Infinity;
		-const nan = NaN;		// "not a number"



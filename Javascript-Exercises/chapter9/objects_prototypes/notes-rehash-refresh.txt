// This is my second time going through this chapter 

- The author posits that "Like arrays, objects in Javascripts are containers [specifically::called: aggregate or complex data types] " 
- In spite of desiring to vomit over this, I'll have to press because the topic is one that any serious developer has to stomach thru

	1. Arrays contain values (duh), indexed numerically (duh)
		objects -> properties indexed by 'string' or 'symbol Symbol()' 
	
	2. Arrays are 'ordered' (arr[0] always comes before arr[1]; 
		objects -> are not ordered and may present themselves in random ways s

* really frustrated with the authors 'jest' at the moment.

Array

const arr = [1, 2, 3, 4, 5];


Objects 

var obj = {
	fname: name, 
	age: age,
	security = function () {
		return "something evil this way comes" 
		},
	} 


&this 
	"to refer to the instance a method is was invoked on" 
	"the this keyword is a placeholder for a specific instance, which will be known by the time the method is invoked" 



The Prototype Object 
	- Will have default properties and methods
	- All other data types will inherit from the prototype 
		Array, Function, Number, String, Boolean -> Default properties and methods inherited from Object

		Object.hasOwnProperty() 

		- SO when you create any primitive you are in fact creating on the existing object (thus an instance) of the object:
			Array Instance, Function Instance, Number Instance, String Instance, Boolean Instance -> Default properties and methods 
			::inherited from Object AND its constructor 

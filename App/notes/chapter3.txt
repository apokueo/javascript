                            <h1> Chapter 3 : Data </h1>

    all data is represented by 0's and 1's

    data types are the representations of that data and each language can have its own data type.

    objects with the ability to hold data : ( variables, constants, and literals )

    // values can change at any time with vars wit ha simple reassignment.

    ~ variables = 'named value';

    // const however has its initial value set and does not change from that set value.

    ~ const Max_Temp_C = 24;

    the let keyword in the new ES6 allows for the declaration of multiple variables with only using one let command.

    let users, env1 = "Sales", env2 = "Collaboration"

          <h1> Identifier Names </h1>


    Variable and Constant (NAMES) are called Identifiers and those names have conventions.

    Identifiers must start with a (letter: [a,b,c], dollarSign: [$], underscore: [_])

    unicode is allowed
    identifiers cannot be reserved words


    ~ Note about casing

      camelCasing = "currentCamel"
      snake_casing = "snake_in_the_grass"

    ~ Note on identifiers

    should not start with uppercasing
    except for class identifiers





                    <h1> Literals </h1>


    literal - providing the value directly in the program.

    let room1 = "conference_room_a"

    /* room1 = "identifier"
       "conerence_room_a" = string literal
    */


                  <h1> Primitive Types and Objects </h1>


    sixPrimitives = Numbers, String, Boolean, Null, Undefined, Symbol

    //objects can be used to construct custom data types
    objects = Arrat, Date, RegExp, Map and WeakMap, Set and WeakSet


    JavaScript approximates real numbers through a fromat know as IEEE-764 double-precision floating point

    ~ Numerical literals

    literal formats = decimal, binary, octal, hexa-decimal
    all literal formats get stored as doubles

    (look into these 4 literal )


    USEFUL PROPERTIES FOR NUMBER OBJECTS

    const small = Number.EPSILON; //the smallest value that can be added to 1 to get a distinct number larger than 1 apporx. 2.2e-16

    const bigInt = Number.MAX_SAFE_INTIGER; // the largest representable integer
    const max = Number.MAX_VALUE; // largest represented number

    const min = Number.MIN_VALUE; // smallest    "         "
    const nInf = Number.NEGATIVE_INFINITY

    const nan = Number.NaN
    const inf = Number.POSITIVE_INFINITY

    ~ Special Characters

    escaping "\ allows for doesn't "\ to appear with apostrophe
    or 'he looked quite frankly and said " that doesn\'t make sense " '

    \n for new line
    \r for carriage return
    \t for Tab
    \' for don't
    \" for 'sam said \"hello\".'
    \` for accent grave
    \$ for interpolation
    \\


    string templates introduced in es6 for string concatenation

    let currentTemp = 20;


    const message = `the current temp is ${currentTemp}\u00b0C`;

    console.log(message);

    const multiline = "line1\n\Line2";
    //creates code after \n\ on a new line
    const multiline2 = `line1
    line2`;
    // backticks behave like one would think. Just printing as the document was typed.

    console.log(multiline2);


    <h1> Numbers as Strings </h1>

     2 general cases
      1. const result1 = 3 + "30"; results in "330"
      2. const result2 = 3 * "30"; results in 90



      <h1> Symbols </h1>


    Symbols are new es6 data type representing unique tokens. Once the symbol is created its unique.


    <h1> Objects </h1>

    contents of an object are called properties and properties consist of keys and values.

    obj.size; // undefined
    obj.color // blue

    can add functions to objects

    sam3.speak = function() {
      return "Meow";
    };

    same3.speak;

    WE CAN ALSO FUCKING DELTE PROPERTIES or FUNCTIONS FROM AN OBJECT WITH THE DELETE OPERATOR

    delete sam3.speak


    <h1> ARRAYS BISHES </h1>

    const arry = [0, 1, 2];

  const a2 = [1, "cat", 3, "Yomesh", "26"];

  const a3 = ["cat dog frankford mismatch polywhirling segemented toxisic mean", " also some other words"]

  const cats = [
    {species:"bengal tiger", sex: "male", age: "who the fuck knows", name: "Salset"},
    {species:"siberian tiger", sex: "female", age: "she isn'e about to disclose that", name: 'and I quote "you can get to know me first." '},
  ];
  const aRayRay = [
    ["array content", 0, " something like this I guess", "21" ],
    [0, 5, 10],
  ];

  const arr = [1, 2, 'c', 4, 5];
  arr[2] = 3; // change the 2nd index of the arrays value to 3 instead of string 'c'.



  const date = new Date();
  date;

  const birthday = new Date(1990, 11, 27);

  const birthdayPartyTime = new Date(2018, 11, 27, 19, 09, 0);
  birthdayPartyTime.getFullYear();
  birthdayPartyTime.getMonth();
  birthdayPartyTime.getDate();
  birthdayPartyTime.getHours();
  birthdayPartyTime.getMinutes();
  birthdayPartyTime.getDay();
  birthdayPartyTime.getSeconds();
  birthdayPartyTime.getMilliseconds();

  //REGEX

  // const email = /\b[a-z0-9._-]+@[a-z_-]+(?:\.[a-z]+)+\b
  // const phone = /(:?\+1)?(:?\(d{3}\)\s?|\d{3}[\s-]?)\d{3}[\s-]?\d{4}/;

  // Introduction to Map and Set
  /*
  Map, like objects contains key value relationsip
  Sets are similar to arrays, except don't contain duplicates

  converting numbers
  */
  const numStr = "33.3"
  const num = Number(numStr);
  const a = parseInt("16 volts", 10);
  const b = parseInt("3a", 16);  // parse hexidecimal result 58
  const c = parseFloat("15.5 kph"); // 15.5
  const d = new Date();
  const t = d.valueOf();   // get the date in numeric value

  /*
  Converting to string
  */

  const n = 33.5;
  const s = n.toString();

  console.log(arry.length);
  console.log(a2);
  console.log(cats);
  console.log(aRayRay[0][0]);
  console.log(aRayRay[1][2]); // drilling into arrays
  console.log(cats[cats.length - 1]); // retrieves the length minus 1 returning the value at the end of the array. Note: want to learn how to drill into object properties of arrays
  console.log(date);
  console.log(birthdayPartyTime);
